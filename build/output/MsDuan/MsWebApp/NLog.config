<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <targets>
    <!--write log message to Visual Studio Output-->
    <target name="debugger" xsi:type="Debugger" layout="NLog: ${date:format=HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}"/>

    <!-- write logs to database -->
    <target name="sqliteDb" xsi:type="Database"  keepConnection="false" useTransactions="false">
      <dbProvider>
        System.Data.SQLite.SQLiteConnection, System.Data.SQLite, Version=1.0.110.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139
      </dbProvider>
      <connectionString>
        data source=E:\003SvnWorks\Working\source3\ISolator3.0.NetCroe\build\output\MsDuan\MsWebApp\db\MsIsolatorLog.db;Version=3;
      </connectionString>
      <commandText>
        CREATE TABLE IF NOT EXISTS MsWebApp
        (ID INTEGER  PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
        Timestamp  DATETIME NOT NULL,
        Level       TEXT     NOT NULL,
        Message        TEXT     NOT NULL,
        Action         TEXT     NOT NULL,
        Amount        TEXT     NOT NULL,
        StackTrace      TEXT     NOT NULL);

        INSERT INTO MsWebApp(Timestamp,Level,Message,Action,Amount,StackTrace) VALUES(@timestamp, @level, @message, @action, @amount, @stacktrace)
      </commandText>
      <parameter name="@timestamp" layout="${date}" />
      <parameter name="@level" layout="${level:uppercase=true}" />
      <parameter name="@message" layout="${message}" />
      <parameter name="@action" layout="${event-context:item=Action}" />
      <parameter name="@amount" layout="${event-context:item=Amount}" />
      <parameter name="@stacktrace" layout="${stacktrace}" />
    </target>


    <!-- write logs to console -->
    <target name="console" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="false"
        layout="${longdate}|${pad:padding=5:inner=${level:uppercase=true}}-->${message}">
      <highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
      <highlight-row condition="level == LogLevel.Info" foregroundColor="Gray" />
      <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
      <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
      <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
    </target>

    <!-- write logs to file -->
    <target name="infoFile" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="${basedir}/logs/${shortdate}_info.log"
              layout="${longdate} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}" />
    </target>
    <target name="errorFile" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="${basedir}/logs/${shortdate}_error.log"
              layout="${longdate} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}" />
    </target>
  </targets>

    <rules>
    <!--TRACE,DEBUG,INFO,WARN,ERROR,FATAL-->
    <logger name="*" minlevel="Debug" writeTo="debugger" />
    <!--TRACE,DEBUG,INFO,WARN,ERROR,FATAL-->
    <logger name="*" minlevel="Debug" writeTo="console"/>　　
    <!--DEBUG,INFO,WARN,ERROR,FATAL-->
    <logger name="*" minlevel="Info" maxlevel="Info" writeTo="infoFile" />
    <logger name="*" minlevel="Warn" maxlevel="Fatal" writeTo="errorFile" />
    <logger name="*" minlevel="Info" writeTo="sqliteDb" />
  </rules>

</nlog>
